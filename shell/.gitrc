#!/usr/bin/env bash
is_in_git_repo() {
  git rev-parse HEAD > /dev/null 2>&1
}
alias gpso='git push origin HEAD'
alias gplo='git pull origin'
alias gcb='git checkout -b'
alias gcmsg='git commit -m'
#alias gco='git checkout'
unalias gco
alias gcp='git cherry-pick'
alias gd='git diff'
alias gdca='git diff --cached'
alias gf='git fetch -p --tags'
alias glog='git log --oneline --decorate --graph'
alias glgg='git log --graph'
alias gm='git merge'
alias gpsh='git push'
alias gpl='git pull'
alias grsoft='git reset --soft'
alias grmixed='git reset --mixed'
alias gst='git status'
alias gstash='git stash'
alias gstp='git stash pop'
alias ga='git add'
alias gft='git fetch'
alias grbs='git rebase'
alias gpffonly='git pull --ff-only'
alias grbsomas='git fetch && git rebase origin/master'
alias grbsomain='git rebase origin/main'
alias gamend='git commit --amend'
export gmrgo(){git merge origin/$1}
alias gpull='git pull origin $(git rev-parse --abbrev-ref HEAD)'
alias gunstage='git restore --staged'

alias lzga='git diff --name-only --diff-filter=ADMRU | fzf | xargs git add'
gitb() {
  is_in_git_repo &&
    git branch -a -vv --color=always | grep -v '/HEAD\s' |
    fzf --height 40% --ansi --multi --tac | sed 's/^..//' | awk '{print $1}' |
    sed 's#^remotes/[^/]*/##'
}

gco() {
    if [ $# -eq 0 ]; then
        git checkout $(gitb)
    else
        git checkout $1
    fi
}

fzf-down() {
  fzf --height 50% --min-height 20 --border --bind ctrl-/:toggle-preview "$@"
}

_gf() {
  is_in_git_repo || return
  git -c color.status=always status --short |
  fzf-down -m --ansi --nth 2..,.. \
    --preview '(git diff --color=always -- {-1} | sed 1,4d; cat {-1})' |
  cut -c4- | sed 's/.* -> //'
}

_gg() {
  is_in_git_repo || return
  git branch -a --color=always | grep -v '/HEAD\s' | sort |
  fzf-down --ansi --multi --tac --preview-window right:70% \
    --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" $(sed s/^..// <<< {} | cut -d" " -f1)' |
  sed 's/^..//' | cut -d' ' -f1 |
  sed 's#^remotes/##'
}

_gt() {
  is_in_git_repo || return
  git tag --sort -version:refname |
  fzf-down --multi --preview-window right:70% \
    --preview 'git show --color=always {}'
}

_gh() {
  is_in_git_repo || return
  git log --date=short --format="%C(green)%C(bold)%cd %C(auto)%h%d %s (%an)" --graph --color=always |
  fzf-down --ansi --no-sort --reverse --multi --bind 'ctrl-s:toggle-sort' \
    --header 'Press CTRL-S to toggle sort' \
    --preview 'grep -o "[a-f0-9]\{7,\}" <<< {} | xargs git show --color=always' |
  grep -o "[a-f0-9]\{7,\}"
}

_gr() {
  is_in_git_repo || return
  git remote -v | awk '{print $1 "\t" $2}' | uniq |
  fzf-down --tac \
    --preview 'git log --oneline --graph --date=short --pretty="format:%C(auto)%cd %h%d %s" {1}' |
  cut -d$'\t' -f1
}

_gs() {
  is_in_git_repo || return
  git stash list | fzf-down --reverse -d: --preview 'git show --color=always {1}' |
  cut -d: -f1
}

# A helper function to join multi-line output from fzf
join-lines() {
  local item
  while read item; do
    echo -n "${(q)item} "
  done
}

() {
  local c
  for c in $@; do
    eval "fzf-g$c-widget() { local result=\$(_g$c | join-lines); zle reset-prompt; LBUFFER+=\$result }"
    eval "zle -N fzf-g$c-widget"
    eval "bindkey '^g^$c' fzf-g$c-widget"
  done
} f g t r h s


gsc () {
    git log \
    --reverse \
    --color=always \
    --format="%C(cyan)%h %C(blue)%ar%C(auto)%d \
    %C(yellow)%s%b %C(green)%ae" "$@" | 
    fzf -i -e +s \
    --reverse \
    --tiebreak=index \
    --no-multi \
    --ansi \
    --preview="echo {} |
    grep -o '[a-f0-9]\{7\}' |
    head -1 |
    xargs -I % sh -c 'git show --color=always % |
    diff-so-fancy'" \
    --header "enter: view, C-c: copy hash" \
    --bind "enter:execute:$_viewGitLogLine | less -R" \
    --bind "ctrl-c:execute:$_gitLogLineToHash | \
    xclip -r -selection clipboard"
}
